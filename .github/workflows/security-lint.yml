name: Security and Linting

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize, labeled, unlabeled]
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run ShellCheck
      uses: super-linter/super-linter@v8
      env:
        DEFAULT_WORKSPACE: .
        FILTER_REGEX_EXCLUDE: .*\.md
        LINTER_RULES_PATH: ./.github/linters
        SHELLCHECK_DISABLE: false
        BASH_DISABLE: false
        
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Check file permissions
      run: |
        echo "Checking file permissions..."
        
        # All scripts should be executable
        for script in commands/*; do
          if [ -f "$script" ] && [ ! -x "$script" ]; then
            echo "‚ùå Script not executable: $script"
            exit 1
          fi
        done
        
        # Installation scripts should be executable
        for script in install.sh health-check.sh; do
          if [ -f "$script" ] && [ ! -x "$script" ]; then
            echo "‚ùå Script not executable: $script"
            exit 1
          fi
        done
        
        echo "‚úÖ All scripts have correct permissions"
        
    - name: Check for hardcoded paths
      run: |
        echo "Checking for hardcoded paths..."
        
        # Check for absolute paths that might cause issues
        if grep -r "/home/" commands/ || grep -r "/root/" commands/; then
          echo "‚ùå Found hardcoded home paths"
          exit 1
        fi
        
        # Check for Windows-specific paths
        if grep -r "C:\\" commands/ || grep -r "D:\\" commands/; then
          echo "‚ùå Found hardcoded Windows paths"
          exit 1
        fi
        
        echo "‚úÖ No hardcoded paths found"
        
    - name: Check for dangerous commands
      run: |
        echo "Checking for potentially dangerous commands..."
        
        dangerous_commands=(
          "rm -rf"
          "dd if="
          "mkfs"
          "fdisk"
          "chmod 777"
        )
        
        for cmd in "${dangerous_commands[@]}"; do
          if grep -r "$cmd" commands/; then
            echo "‚ö†Ô∏è  Warning: Found potentially dangerous command: $cmd"
          fi
        done
        
        echo "‚úÖ No dangerous commands found"
        
    - name: Validate script headers
      run: |
        echo "Validating script headers..."
        
        for script in commands/*; do
          if [ -f "$script" ]; then
            if ! head -1 "$script" | grep -q "#!/bin/bash"; then
              echo "‚ùå Missing shebang in: $script"
              exit 1
            fi
          fi
        done
        
        echo "‚úÖ All scripts have proper shebang"
        
    - name: Check for syntax errors
      run: |
        echo "Checking script syntax..."
        
        for script in commands/* install.sh health-check.sh; do
          if [ -f "$script" ]; then
            echo "Checking: $script"
            bash -n "$script" || {
              echo "‚ùå Syntax error in: $script"
              exit 1
            }
          fi
        done
        
        echo "‚úÖ All scripts have valid syntax"
        
    - name: Check documentation
      run: |
        echo "Checking documentation..."
        
        # Check if README exists and has content
        if [ ! -f "README.md" ] || [ ! -s "README.md" ]; then
          echo "‚ùå README.md is missing or empty"
          exit 1
        fi
        
        # Check if CONTRIBUTING exists
        if [ ! -f "CONTRIBUTING.md" ]; then
          echo "‚ö†Ô∏è  Warning: CONTRIBUTING.md is missing"
        fi
        
        # Check if LICENSE exists
        if [ ! -f "LICENSE" ]; then
          echo "‚ö†Ô∏è  Warning: LICENSE is missing"
        fi
        
        echo "‚úÖ Documentation check passed"
        
    - name: Check for sensitive information
      run: |
        echo "Checking for sensitive information..."
        
        # Check for hardcoded emails, passwords, tokens
        if grep -r "password\|secret\|token\|key" commands/ --ignore-case; then
          echo "‚ö†Ô∏è  Warning: Found potential sensitive terms"
        fi
        
        # Check for hardcoded URLs
        if grep -r "http://\|https://" commands/; then
          echo "‚ö†Ô∏è  Warning: Found hardcoded URLs"
        fi
        
        echo "‚úÖ No obvious sensitive information found"
        
    - name: Summary
      run: |
        echo ""
        echo "üîí Security and Code Quality Summary:"
        echo "  ‚úÖ File permissions"
        echo "  ‚úÖ No hardcoded paths"
        echo "  ‚úÖ No dangerous commands"
        echo "  ‚úÖ Valid script headers"
        echo "  ‚úÖ Script syntax"
        echo "  ‚úÖ Documentation"
        echo "  ‚úÖ No sensitive information"
        echo ""
        echo "üöÄ Code quality checks passed!"
