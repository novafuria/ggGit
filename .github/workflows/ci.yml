name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        channel-priority: strict
    
    - name: Cache conda dependencies
      uses: actions/cache@v3
      with:
        path: ~/.conda/pkgs
        key: ${{ runner.os }}-conda-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-
    
    - name: Install dependencies
      run: |
        conda env create -f environment.yml
        conda activate gggit
        pip install -e .
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        conda activate gggit
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        conda activate gggit
        black --check src tests
    
    - name: Check import sorting with isort
      run: |
        conda activate gggit
        isort --check-only src tests
    
    - name: Type check with mypy
      run: |
        conda activate gggit
        mypy src --ignore-missing-imports
    
    - name: Run unit tests
      run: |
        conda activate gggit
        pytest tests/ -m unit --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml
    
    - name: Run integration tests
      run: |
        conda activate gggit
        pytest tests/ -m integration --cov=src --cov-report=xml --cov-report=html --junitxml=test-results-integration.xml
    
    - name: Run all tests with coverage
      run: |
        conda activate gggit
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=test-results-all.xml --cov-fail-under=70
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results*.xml
          htmlcov/
          coverage.xml

  quality-gates:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.12'
        channels: conda-forge,defaults
        channel-priority: strict
    
    - name: Install dependencies
      run: |
        conda env create -f environment.yml
        conda activate gggit
        pip install -e .
        pip install -r requirements-dev.txt
    
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results-3.12
        path: test-results/
    
    - name: Parse test results
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        import sys
        
        # Parse test results
        try:
            tree = ET.parse('test-results/test-results-all.xml')
            root = tree.getroot()
            
            tests = int(root.get('tests', 0))
            failures = int(root.get('failures', 0))
            errors = int(root.get('errors', 0))
            
            print(f'Tests: {tests}')
            print(f'Failures: {failures}')
            print(f'Errors: {errors}')
            
            if failures > 0 or errors > 0:
                print('❌ Quality gate failed: Tests have failures or errors')
                sys.exit(1)
            else:
                print('✅ Quality gate passed: All tests passed')
        except Exception as e:
            print(f'❌ Quality gate failed: Could not parse test results: {e}')
            sys.exit(1)
        "
    
    - name: Check coverage threshold
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        import sys
        
        try:
            tree = ET.parse('test-results/coverage.xml')
            root = tree.getroot()
            
            line_rate = float(root.get('line-rate', 0))
            branch_rate = float(root.get('branch-rate', 0))
            
            print(f'Line coverage: {line_rate:.2%}')
            print(f'Branch coverage: {branch_rate:.2%}')
            
            if line_rate < 0.70:
                print('❌ Quality gate failed: Line coverage below 70%')
                sys.exit(1)
            elif branch_rate < 0.60:
                print('❌ Quality gate failed: Branch coverage below 60%')
                sys.exit(1)
            else:
                print('✅ Quality gate passed: Coverage thresholds met')
        except Exception as e:
            print(f'❌ Quality gate failed: Could not parse coverage: {e}')
            sys.exit(1)
        "

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.12'
        channels: conda-forge,defaults
        channel-priority: strict
    
    - name: Install dependencies
      run: |
        conda env create -f environment.yml
        conda activate gggit
        pip install -e .
        pip install safety bandit
    
    - name: Security check with safety
      run: |
        conda activate gggit
        safety check --json --output safety-report.json || true
    
    - name: Security check with bandit
      run: |
        conda activate gggit
        bandit -r src -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  notify:
    runs-on: ubuntu-latest
    needs: [test, quality-gates, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.quality-gates.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"
    
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.quality-gates.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1